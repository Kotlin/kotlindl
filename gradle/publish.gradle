/*
 * Copyright 2020 JetBrains s.r.o. and Kotlin Deep Learning project contributors. All Rights Reserved.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE.txt file.
 */

apply plugin: 'maven-publish'
apply from: project.rootProject.file('gradle/maven-metadata.gradle')

def isMultiplatform = project.name in ["dataset", "api", "onnx"]

task javadocJar(type: Jar) {
    classifier 'javadoc'
}

def sonatypeUser = System.getenv('SONATYPE_USER')
def sonatypePassword = System.getenv('SONATYPE_PASSWORD')

def moduleName = "kotlin-deeplearning-" + project.name

nexusStaging {
    username sonatypeUser
    password sonatypePassword
    packageGroup project.group.toString()
    repositoryDescription "kotlinx.kotlindl staging repository, version: $version"
    delayBetweenRetriesInMillis 5000
}

afterEvaluate {
    publishing {
        if (!isMultiplatform) {
            publications {
                maven(MavenPublication) { publication ->
                    pom.withXml(configureMavenCentralMetadata)
                    from components.java
                    artifactId moduleName
                    groupId project.group
                    version project.version
                    artifact javadocJar
                    artifact sourcesJar
                }
            }
            return
        }
        publications.configureEach {
            def type = it.name
            switch (type) {
                case 'kotlinMultiplatform':
                    it.artifactId "$moduleName"
                    break
                default:
                    it.artifactId "$moduleName-$type"
                    break
            }
            groupId project.group
            version project.version
            pom.withXml(configureMavenCentralMetadata)
            if (name != "kotlinMultiplatform") {
                artifact javadocJar
            }
        }
        repositories {
            maven {
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username = sonatypeUser
                    password = sonatypePassword
                }
            }
        }
    }
}

def signingKey = System.getenv("SIGN_KEY_ID")
def signingKeyPassphrase = System.getenv("SIGN_KEY_PASSPHRASE")
def signingPrivateKey = System.getenv("SIGN_KEY_PRIVATE")

if (signingKey != null) {
    apply plugin: 'signing'
    signing {
        useInMemoryPgpKeys(signingKey, signingPrivateKey, signingKeyPassphrase)
        sign publishing.publications
    }
}
